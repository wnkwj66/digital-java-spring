/*
 * Generated by the Jasper component of Apache Tomcat
 * Version: Apache Tomcat/9.0.37
 * Generated at: 2020-07-24 07:10:01 UTC
 * Note: The last modified time of this file was set to
 *       the last modified time of the source file after
 *       generation to assist with modification tracking.
 */
package org.apache.jsp.WEB_002dINF.views.main;

import javax.servlet.*;
import javax.servlet.http.*;
import javax.servlet.jsp.*;

public final class signup_jsp extends org.apache.jasper.runtime.HttpJspBase
    implements org.apache.jasper.runtime.JspSourceDependent,
                 org.apache.jasper.runtime.JspSourceImports {

  private static final javax.servlet.jsp.JspFactory _jspxFactory =
          javax.servlet.jsp.JspFactory.getDefaultFactory();

  private static java.util.Map<java.lang.String,java.lang.Long> _jspx_dependants;

  static {
    _jspx_dependants = new java.util.HashMap<java.lang.String,java.lang.Long>(2);
    _jspx_dependants.put("/WEB-INF/lib/jstl-1.2.jar", Long.valueOf(1594169636771L));
    _jspx_dependants.put("jar:file:/C:/Users/Administrator/Documents/workspace-spring-tool-suite-4-4.7.0.RELEASE/.metadata/.plugins/org.eclipse.wst.server.core/tmp0/wtpwebapps/spring/WEB-INF/lib/jstl-1.2.jar!/META-INF/c.tld", Long.valueOf(1153352682000L));
  }

  private static final java.util.Set<java.lang.String> _jspx_imports_packages;

  private static final java.util.Set<java.lang.String> _jspx_imports_classes;

  static {
    _jspx_imports_packages = new java.util.HashSet<>();
    _jspx_imports_packages.add("javax.servlet");
    _jspx_imports_packages.add("javax.servlet.http");
    _jspx_imports_packages.add("javax.servlet.jsp");
    _jspx_imports_classes = null;
  }

  private volatile javax.el.ExpressionFactory _el_expressionfactory;
  private volatile org.apache.tomcat.InstanceManager _jsp_instancemanager;

  public java.util.Map<java.lang.String,java.lang.Long> getDependants() {
    return _jspx_dependants;
  }

  public java.util.Set<java.lang.String> getPackageImports() {
    return _jspx_imports_packages;
  }

  public java.util.Set<java.lang.String> getClassImports() {
    return _jspx_imports_classes;
  }

  public javax.el.ExpressionFactory _jsp_getExpressionFactory() {
    if (_el_expressionfactory == null) {
      synchronized (this) {
        if (_el_expressionfactory == null) {
          _el_expressionfactory = _jspxFactory.getJspApplicationContext(getServletConfig().getServletContext()).getExpressionFactory();
        }
      }
    }
    return _el_expressionfactory;
  }

  public org.apache.tomcat.InstanceManager _jsp_getInstanceManager() {
    if (_jsp_instancemanager == null) {
      synchronized (this) {
        if (_jsp_instancemanager == null) {
          _jsp_instancemanager = org.apache.jasper.runtime.InstanceManagerFactory.getInstanceManager(getServletConfig());
        }
      }
    }
    return _jsp_instancemanager;
  }

  public void _jspInit() {
  }

  public void _jspDestroy() {
  }

  public void _jspService(final javax.servlet.http.HttpServletRequest request, final javax.servlet.http.HttpServletResponse response)
      throws java.io.IOException, javax.servlet.ServletException {

    if (!javax.servlet.DispatcherType.ERROR.equals(request.getDispatcherType())) {
      final java.lang.String _jspx_method = request.getMethod();
      if ("OPTIONS".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        return;
      }
      if (!"GET".equals(_jspx_method) && !"POST".equals(_jspx_method) && !"HEAD".equals(_jspx_method)) {
        response.setHeader("Allow","GET, HEAD, POST, OPTIONS");
        response.sendError(HttpServletResponse.SC_METHOD_NOT_ALLOWED, "JSP들은 오직 GET, POST 또는 HEAD 메소드만을 허용합니다. Jasper는 OPTIONS 메소드 또한 허용합니다.");
        return;
      }
    }

    final javax.servlet.jsp.PageContext pageContext;
    javax.servlet.http.HttpSession session = null;
    final javax.servlet.ServletContext application;
    final javax.servlet.ServletConfig config;
    javax.servlet.jsp.JspWriter out = null;
    final java.lang.Object page = this;
    javax.servlet.jsp.JspWriter _jspx_out = null;
    javax.servlet.jsp.PageContext _jspx_page_context = null;


    try {
      response.setContentType("text/html; charset=EUC-KR");
      pageContext = _jspxFactory.getPageContext(this, request, response,
      			null, true, 8192, true);
      _jspx_page_context = pageContext;
      application = pageContext.getServletContext();
      config = pageContext.getServletConfig();
      session = pageContext.getSession();
      out = pageContext.getOut();
      _jspx_out = out;

      out.write("\r\n");
      out.write("\r\n");
      out.write("\r\n");
      out.write("<form method=\"post\" action=\"");
      out.print(request.getContextPath());
      out.write("/signup\">\r\n");
      out.write("<div class=\"container-body\">\r\n");
      out.write("\t\t<div class=\"logo\">\r\n");
      out.write("\t\t\t<a href=\"//naver.com\">NAVER</a>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"container-id\">\r\n");
      out.write("\t\t\t<div class=\"text-id\">아이디</div>\r\n");
      out.write("\t\t\t<div class=\"box-id\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"id\" id=\"id\">\r\n");
      out.write("\t\t\t\t<label for=\"id\"></label>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<label id=\"id-error\" class=\"error\" for=\"id\"></label>\r\n");
      out.write("\t\t\t<div class=\"dup-fail-msg display-none\">이미 사용중이거나 탈퇴한 아이디입니다.</div>\r\n");
      out.write("\t\t\t<div class=\"dup-suc-msg display-none\">멋진 아이디네요!</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"container-pw\">\r\n");
      out.write("\t\t\t<div class=\"text-pw\">비밀번호</div>\r\n");
      out.write("\t\t\t<div class=\"box-pw\">\r\n");
      out.write("\t\t\t\t<input type=\"password\" name=\"pw\" id=\"pw\">\r\n");
      out.write("\t\t\t\t<a href=\"#\"></a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<label id=\"pw-error\" class=\"error\" for=\"pw\"></label>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"container-pw\">\r\n");
      out.write("\t\t\t<div class=\"text-pw\">비밀번호 확인</div>\r\n");
      out.write("\t\t\t<div class=\"box-pw\">\r\n");
      out.write("\t\t\t\t<input type=\"password\" name=\"pw2\" id=\"pw2\">\r\n");
      out.write("\t\t\t\t<a href=\"#\"></a>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<label id=\"pw2-error\" class=\"error\" for=\"pw2\"></label>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<div class=\"container-gender\">\r\n");
      out.write("\t\t\t<div class=\"text-gender\">성별</div>\r\n");
      out.write("\t\t\t<div class=\"box-gender\">\r\n");
      out.write("\t\t\t\t<select name=\"gender\" id=\"gender\">\r\n");
      out.write("\t\t\t\t\t<option value=\"\">성별</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"male\">남자</option>\r\n");
      out.write("\t\t\t\t\t<option value=\"female\">여자</option>\r\n");
      out.write("\t\t\t\t</select>\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<label id=\"gender-error\" class=\"error\" for=\"gender\"></label>\r\n");
      out.write("\t\t<div class=\"container-email\">\r\n");
      out.write("\t\t\t<div class=\"text-bold\">본인확인 이메일 <span class=\"text-small\"></span></div>\r\n");
      out.write("\t\t\t<div class=\"box-email\">\r\n");
      out.write("\t\t\t\t<input type=\"text\" name=\"email\" id=\"email\">\r\n");
      out.write("\t\t\t</div>\r\n");
      out.write("\t\t\t<label id=\"email-error\" class=\"error\" for=\"email\"></label>\r\n");
      out.write("\t\t</div>\r\n");
      out.write("\t\t<button class=\"btn-submit\">가입하기</button>\r\n");
      out.write("\t</div>\r\n");
      out.write("</form>\r\n");
      out.write("<script>\r\n");
      out.write("\t$(function(){\r\n");
      out.write("\t\t$('#id').keyup(function(){\r\n");
      out.write("\t\t\tvar id = $(this).val();\r\n");
      out.write("\t\t\tif(id.length >= 4)\r\n");
      out.write("\t\t\t $.ajax({\r\n");
      out.write("\t\t\t        async:true,\r\n");
      out.write("\t\t\t        type:'POST',\r\n");
      out.write("\t\t\t        data:id,\r\n");
      out.write("\t\t\t        url:\"");
      out.print(request.getContextPath());
      out.write("/idCheck\",\r\n");
      out.write("\t\t\t        dataType:\"json\",\r\n");
      out.write("\t\t\t        contentType:\"application/json; charset=UTF-8\",\r\n");
      out.write("\t\t\t        //↓성공하면 서버에서 보내준 데이터 값을 콘솔로그로 하여 찍어봄\r\n");
      out.write("\t\t\t        success : function(data){\r\n");
      out.write("\t\t\t\t      \tif(data['check']){\r\n");
      out.write("\t\t\t\t\t      \t$('.dup-suc-msg').removeClass('display-none')\r\n");
      out.write("\t\t\t\t\t      \t$('.dup-fail-msg').addClass('display-none')\r\n");
      out.write("\t\t\t\t\t    }else{\r\n");
      out.write("\t\t\t\t\t    \t$('.dup-suc-msg').addClass('display-none')\r\n");
      out.write("\t\t\t\t\t      \t$('.dup-fail-msg').removeClass ('display-none')\r\n");
      out.write("\t\t\t\t\t\t}\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\telse{\r\n");
      out.write("\t\t\t\t$('.dup-suc-msg').addClass('display-none')\r\n");
      out.write("\t\t      \t$('.dup-fail-msg').addClass ('display-none')\r\n");
      out.write("\t\t\t}\r\n");
      out.write("\t\t\t $(\"form\").validate({ //<form태그의 유효성을 검사함 (submit때도 동작)\r\n");
      out.write("\t\t\t        rules: { //규칙\r\n");
      out.write("\t\t\t            id: { //id는\r\n");
      out.write("\t\t\t                required : true, //필수항목이고\r\n");
      out.write("\t\t\t                minlength : 4 //최소 4글자로 하겠다\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            pw: {\r\n");
      out.write("\t\t\t                required : true,\r\n");
      out.write("\t\t\t                minlength : 8,\r\n");
      out.write("\t\t\t                maxlength : 20,\r\n");
      out.write("\t\t\t                regex: /^\\w*(\\d[A-z]|[A-z]\\d)\\w*$/ //<= 숫자와 영문자가 반드시 하나 이상 포함된 정규표현식 \r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            pw2: {\r\n");
      out.write("\t\t\t                required : true,\r\n");
      out.write("\t\t\t                equalTo : pw\r\n");
      out.write("\t\t\t            },\t\r\n");
      out.write("\t\t\t              //  digits : true //숫자만 입력\r\n");
      out.write("\t\t\t            email: {\r\n");
      out.write("\t\t\t                required : true,\r\n");
      out.write("\t\t\t                email : true\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            gender: {\r\n");
      out.write("\t\t\t            \trequired : true\r\n");
      out.write("\t\t\t            }\r\n");
      out.write("\t\t\t        },\r\n");
      out.write("\t\t\t        //규칙체크 실패시 출력될 메시지\r\n");
      out.write("\t\t\t        messages : {\r\n");
      out.write("\t\t\t            id: {\r\n");
      out.write("\t\t\t                required : \"필수로입력하세요\",\r\n");
      out.write("\t\t\t                minlength : \"최소 4글자이상이어야 합니다\"\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            pw: {\r\n");
      out.write("\t\t\t                required : \"필수로입력하세요\",\r\n");
      out.write("\t\t\t                minlength : \"최소 {0}글자이상이어야 합니다\",\r\n");
      out.write("\t\t\t                maxlength : \"최대 {0}글자이하이어야 합니다\"\r\n");
      out.write("\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            pw2: {\r\n");
      out.write("\t\t\t                required : \"필수로입력하세요\",\r\n");
      out.write("\t\t\t                equalTo : \"비밀번호가 일치하지 않습니다.\"\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            email: {\r\n");
      out.write("\t\t\t                required : \"필수로입력하세요\",\r\n");
      out.write("\t\t\t                email : \"메일규칙에 어긋납니다\"\r\n");
      out.write("\t\t\t            },\r\n");
      out.write("\t\t\t            gender: {\r\n");
      out.write("\t\t\t            \trequired : \"필수로입력하세요\"\r\n");
      out.write("\t\t\t            }\r\n");
      out.write("\t\t\t        }\r\n");
      out.write("\t\t\t    });\r\n");
      out.write("\t\t\t $.validator.addMethod(\r\n");
      out.write("\t\t\t\t    \"regex\",\r\n");
      out.write("\t\t\t\t    function(value, element, regexp) {\r\n");
      out.write("\t\t\t\t        var re = new RegExp(regexp);\r\n");
      out.write("\t\t\t\t        return this.optional(element) || re.test(value);\r\n");
      out.write("\t\t\t\t    },\r\n");
      out.write("\t\t\t\t    \"Please check your input.\"\r\n");
      out.write("\t\t\t\t);\r\n");
      out.write("\t\t})\r\n");
      out.write("\t})\r\n");
      out.write("</script>");
    } catch (java.lang.Throwable t) {
      if (!(t instanceof javax.servlet.jsp.SkipPageException)){
        out = _jspx_out;
        if (out != null && out.getBufferSize() != 0)
          try {
            if (response.isCommitted()) {
              out.flush();
            } else {
              out.clearBuffer();
            }
          } catch (java.io.IOException e) {}
        if (_jspx_page_context != null) _jspx_page_context.handlePageException(t);
        else throw new ServletException(t);
      }
    } finally {
      _jspxFactory.releasePageContext(_jspx_page_context);
    }
  }
}
