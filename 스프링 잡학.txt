
1.Controller에 원하는 (/board/detail) URI를 처리하는 메소드를 생성
2. 해당 메소드가 GET이고 , 화면을 보여주는 경우,jsp를 생성
3. Controller에서 원하는 정보를 가져오기 위해 Service에게 메소드를 이용하여 일을 시킴(Service에 새로운 메소드 생성)
4. Service는 Controller가 시킨 일을 하기 위해 메소드를 생성(Service와 ServiceImp)하고,Dao를 통해 필요한 정보를 가져옴
5. Dao는 Service가 시킨 일을 하기 위해 메소드를 생성
6. Mapper는 Dao에 있는 일을 하기 위해 쿼리문을 생성
7. Controller 에서 Service가 처리한 정보를 화면에 전송

어노테이션(Annotaion)//@ :클래스나 메서드,변수등 데이터의 정의를 설정하는 데이터 즉, 실제데이터를 적용하는 것은 아니고 
 클래스,메서드,변수를 구분하기 위한 데이터

post : 노출 되면 안되는 정보  // GET: 그외 나머지


request.getContextPath() : 프로젝트 Path만 가져옴 

예) http://localhost8080/board.list.jsp  => [return]  /board 가져옴

request.getRequestURI() : 프로젝트 + 파일경로 

예) http://localhost8080/board.list.jsp  => [return]  /board/list.jsp 가져옴

request.getRequestURL() : 전체 경로 가져옴

예) http://localhost8080/board.list.jsp  => [return]  http://localhost8080/board.list.jsp

@RequestMapping : 요청에 의해 어떤 Controller, 어떤 메소드가 처리할지를 맵핑하기 위한 어노테이션(@)

HttpServletRequest : 값을 받아옴. 예를 들어 id/pw등의 데이터를 컨트롤러로 보냈을 때, HttpServletRequest 객체안에 모든 데이터들이 들어가게 됨

HttpServletRequest.getParameter() : 원하는 데이터를 꺼냄 /반환타입(String)
 예) String id = HttpServletRequest .getParameter("id");   → HttpServletRequest 객체안의 id값을 String타입으로 가져옴.
