controller > service > serviceImp > dao > mapper

1) web.xml : 웹 애플리케이션의 실행 환경에 관련된 각종 설정 정보가 담겨 있는 파일.
브라우저의 요청을 가장 먼저 처리. 필터가 있다면 가장 먼저 반응함(*보통 인코딩 처리)
 -<DispatcherServlet> : 브라우저의 요청이 오면 Controller로 요청이 넘어가기전에 요청을 가로챈다
  가로챈 요청은 servlet-context로 전달됨.
 -<servlet-mapping> 요청 URL패턴을 지정하는 부분. 만약 xxxx.do로 요청하도록 지정하고 싶다면 url-pattern에 *.do로 하면 됨

2) servlet-context.xml : Controller를 이어주는 작업. 즉 HandlerMapping,HandlerAdapter의 작업이 진행된다.

 -<context:component-scan base-package="com.spring.example" />
  : @Controller,@Repository,@Service,@Component 어노테이션이 사용된 클래스를 자동으로 스캔하여 빈으로 등록
    위의 예는 com.spring.example로 지정되어, 해당 패키지 아래에서 어노테이션이 사용된 클래스를 찾아서 빈으로 등록한다는 것

 -<annotation-driven/> 
  : 이 설정을 통해 URL 매핑이 일어난다. 이것에 의해 @RequestMapping을 사용할수 있고 @RequestMapping에 지정된 URL로
    브라우저의 요청 URL이 매핑된다. 만약 <annotation-driven/>을 지우면 URL을 찾을수 없다는 오류 발생
 
3) HomeController
 -servlet-context에 의해 브라우저 요청은 이곳으로 넘어가게 된다. 

 -model.addAttribute("이름",객체)
  :Model 객체에 특정 이름을 지정하여 뷰에서 이름을 이용해 객체를 처리할 수 있게 한다.
  model.addAttribute(객체)로도 사용 가능 -> 이 경우 객체명의 맨 앞글자를 소문자로 처리한 것을 이름으로 사용 가능
   ex) MemberVo member = new MemberVo
        model.addAttribute(member) 
   => 뷰에서 사용하려면 memberVO라는 이름으로 객체 사용 가능

4) servlet-context.xml
  :HomeController에서 넘겨진 정보(객체?/메서드?)는 InternalReSourceViewResolver를 통해 뷰를 찾게 된다.
   전달받은 정보 앞(prefix)에는 /WEB-INF/views/를 붙이고 뒤(suffix)에는 .jsp를 붙임
   
   결국 /WEB-INF/views/정보(변수명).jsp , WEB-INF 아래에 있는 정보(변수명).jsp 파일의 경로를 뷰 이름으로 만들게 된다.
   새롭게 만들어진 뷰 이름은 DispatcherServlet으로 전달


==============================================================================

root.context.xml : 웹과 관련되지 않은 자원들에 대한 설정을 입력하는 곳 
 -nameSpace : XML태그의 폭을 넓혀주기 위한 설정
 -<bean id="dataSource"> : MySQL과 연결 담당/ Jdbc 커넥션을 처리하는 기능을 가지고 있기 때문에 DB와 연동하는 작업 必
    :DataSource 에는 여러 개의 property가 있는데 여기서는 연결할 DB의 주소,계정,비밀번호만 설정하면 된다.

 -<bean id="sqlSessionFactory">: DB와의 연결과 SQL의 실행에 대한 모든것을 가진 객체. DB를 연결해 데이터의 저장,수정,삭제,조회 할 경우 추가 설정 必

***Mapper.xml 
  : 쿼리문 입력하는 곳. 보통 테이블 당 한개의 mapper.xml작성 

UserVO: DB에서 가져온 데이터를 담아 전달하거나, 화면에서 온 데이터를 DB로 전달해주는 역할
 - 테이블의 칼럼에 해당하는 변수를 생성하여 값을 넣거나 가져올 수 있도록 Getter/Setter 메서드 생성

UserDao: 테이블과 연결되어 데이터 처리 담당

HashMap : 상품의 이름과 가격을 HashMap에 넣고 짧은 시간에 key로써 value를 얻을 수 있게 하는 기능
